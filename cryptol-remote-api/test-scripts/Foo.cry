module Foo where

import Id as Id

id : {a} a -> a
id x = x

x : [8]
x = 255

add : {a} (fin a) => [a] -> [a] -> [a]
add = (+)

foo : {foo : [32], bar : [32]} 
foo = {foo = 23, bar = 99}

getFoo : {foo : [32], bar : [32]}  -> [32]
getFoo x = x.foo

op1 : {n} (fin n) => [n] -> [n + 1]
op1 a = 0

op2 : {n} (fin n) => [n] -> [n - n]
op2 a = 0

op3 : {n} (fin n) => [n] -> [n * 1]
op3 a = 0

op4 : {n} (fin n) => [n] -> [n / 1]
op4 a = 0

op5 : {n} (fin n) => [n] -> [n % 1]
op5 a = 0

op6 : {n} (fin n) => [n] -> [n ^^ 1]
op6 a = 0

op7 : {n} (fin n) => [n] -> [n /^ 1]
op7 a = 0

op8 : {n} (fin n) => [n] -> [width n]
op8 a = 0

op9 : {n} (fin n) => [n] -> [max n 1]
op9 a = 0

op10 : {n} (fin n) => [n] -> [min 1 n]
op10 a = 0

op11 : {n} (fin n) => [n] -> [lg2 n]
op11 a = 0

isSqrtOf9 : [8] -> Bit
isSqrtOf9 x = x*x == 9