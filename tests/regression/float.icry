:module FloatTests
:set ascii=on

section "Float Formatting"
:help :set fp-base
:help :set fp-format

:set fp-base=2
10.25 : Medium
:set fp-base=8
10.25 : Medium
:set fp-base=10
10.25 : Medium
1/3   : Small
0.4   : Small
:set fp-base=16
10.25 : Medium
1/3   : Small

:set fp-base=16
:set fp-format=free+exp
0x12.34 : Medium
:set fp-format=.1
0x12.34 : Medium
:set fp-format=2
0x12.34 : Medium
:set fp-format=2+exp
0x12.34 : Medium


section "Float Type"
:help Float
zero : Float 0 0            // Too small
zero : Float 80 1000        // Too large
zero : Small
zero : Medium
zero : Large

section "Literals"
:set fp-base=10
1           : Medium
1.25        : Medium
1.25e2      : Medium
:set fp-base=16
0x1.25      : Medium
0xFF.FFp3   : Medium
0xFF.FFp-4  : Medium
0xFF.FFe3   : Medium     // This is NOT AN EXPONENT
5           : Small
1.2         : Medium

section "NaN"
:help fpNaN
fpNaN : Medium
:set base=2
fpToBits    (fpNaN : Small)
fpToBits    (fpNaN : Medium)
roundTrip   (fpNaN : Large)
eqRefl1     (fpNaN : Medium)
eqRefl2     (fpNaN : Medium)
leqRefl     (fpNaN : Medium)

section "Arithmetic"

:set fp-base=10
1 + 1    : Medium
1 - 1    : Medium
3 * 2    : Medium
3 / 2    : Medium

1  / 0   : Medium
-1 / 0   : Medium
-0 / 0   : Medium
1  / -0  : Medium
-1 / -0  : Medium
-0 / -0  : Medium

2 + 3    : Small
2 + 8    : Small

fpAdd rne 2 3         : Small
fpAdd rne 2 8         : Small
fpAdd rne (-2) (-3)   : Small
fpAdd rne (-2) (-8)   : Small
fpAdd rna 2 3         : Small
fpAdd rna 2 8         : Small
fpAdd rna (-2) (-3)   : Small
fpAdd rna (-2) (-8)   : Small
fpAdd rtp 2 3         : Small
fpAdd rtp 2 8         : Small
fpAdd rtp (-2) (-3)   : Small
fpAdd rtp (-2) (-8)   : Small
fpAdd rtn 2 3         : Small
fpAdd rtn 2 8         : Small
fpAdd rtn (-2) (-3)   : Small
fpAdd rtn (-2) (-8)   : Small
fpAdd rtz 2 3         : Small
fpAdd rtz 2 8         : Small
fpAdd rtz (-2) (-3)   : Small
fpAdd rtz (-2) (-8)   : Small


section "Proofs"
:set prover=w4-z3
:prove \(x : Medium) -> x == 0 \/ x =.= fpNaN     // False
:prove \(x : Medium) -> x == x                    // False
:prove \(x : Medium) -> eqRefl1 x
:prove \(x : Medium) -> eqRefl2 x
:prove \(x : Medium) -> roundTrip x
:prove roundTrip2
:prove \(x : Medium) -> leqRefl x
:prove \(x : Medium) y -> eqProp x y

section "Random Testing"
:check \(x : Medium) -> eqRefl1 x
:check \(x : Medium) -> eqRefl2 x
:check \(x : Medium) -> roundTrip x
:check roundTrip2
:check \(x : Medium) -> leqRefl x
:check \(x : Medium) y -> eqProp x y




