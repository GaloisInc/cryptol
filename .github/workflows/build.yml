name: Cryptol
on:
  push:
  pull_request:

jobs:
  changed:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.get-changed.outputs.changed-files }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: get-changed
        run: echo "::set-output name=changed-files::$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | xargs)"

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        ghc: ["8.4.4", "8.6.5", "8.8.3"]
        cabal: ["3.0.0.0"]
    name: Cryptol - GHC v${{ matrix.ghc }} - ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      # https://github.com/actions/setup-haskell/pull/12
      - uses: actions/setup-haskell@master
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - uses: actions/cache@v1
        name: Cache cabal store
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          # https://github.com/actions/cache/issues/109 "Enable always writing cache to support hermetic build systems"
          # https://github.com/actions/cache/issues/239#issuecomment-606950711 Investigate this workaround if cache starts filling up
          key: store-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/cabal.GHC-*') }}-${{ github.sha }}
          restore-keys: |
            store-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/cabal.GHC-*') }}-
            store-${{ runner.os }}-${{ matrix.ghc }}-
            store-${{ runner.os }}-

      - uses: actions/cache@v1
        if: ${{ ! always() }}
        name: Cache dist-newstyle
        with:
          path: dist-newstyle
          key: dist-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/cabal.GHC-*') }}-${{ github.sha }}
          restore-keys: |
            dist-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/cabal.GHC-*') }}-
            dist-${{ runner.os }}-${{ matrix.ghc }}-

      - name: Install System Dependencies
        shell: bash
        run: |
          ./cry install z3
          ./cry install cvc4
          echo "::add-path::$PWD/bin"

      - name: Install Dependencies
        shell: bash
        run: |
          cp cabal.GHC-${{ matrix.ghc }}.config cabal.project.freeze
          cabal v2-configure -j
          cabal v2-build --only-dependencies exe:cryptol
          ./cry install test-runner

      - name: Build
        shell: bash
        run: cabal v2-build exe:cryptol exe:cryptol-html

      - name: Copy binaries to dist and test them
        shell: bash
        run: ./cry test-dist

      - uses: actions/upload-artifact@v1
        with:
          path: dist
          name: ${{ matrix.ghc }}-${{ matrix.cabal }}-${{ matrix.os }}-bins

  docs:
    runs-on: ubuntu-latest
    needs: [changed]
    if: "startsWith(github.ref, 'refs/tags/v') || contains(needs.changed.outputs.changed, 'docs/')"
    steps:
      - uses: actions/checkout@v2
      - uses: docker://pandoc/latex:latest
        with:
          args: >-
            sh -c
            "
            apk add make &&
            tlmgr install subfigure lastpage preprint adjustbox nag collectbox sectsty todonotes palatino mathpazo &&
            cd docs &&
            make
            "
      - uses: actions/upload-artifact@v1
        with:
          path: docs
          name: docs

  bundle:
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        ghc: ["8.4.4", "8.6.5", "8.8.1"]
        cabal: ["3.0.0.0"]
    needs: [docs, build]
    steps:
      - uses: actions/checkout@v2

      # https://github.com/actions/download-artifact/issues/3
      - uses: actions/download-artifact@v1
        with:
          path: dist/bin
          name: ${{ matrix.ghc }}-${{ matrix.cabal }}-${{ matrix.os }}-bins

      - uses: actions/download-artifact@v1
        with:
          path: docs
          name: docs

      - name: Bundle together
        shell: bash
        run: |
          mkdir -p dist/share/doc/cryptol
          cp -R examples/ dist/share/doc/cryptol/examples/
          cp docs/*md docs/*pdf dist/share/doc/cryptol/

          # Copy the two interesting examples over
          cp docs/ProgrammingCryptol/aes/AES.cry \
            docs/ProgrammingCryptol/enigma/Enigma.cry \
            dist/share/doc/cryptol/examples/

      - id: cryptol
        shell: bash
        run: echo "::set-output name=version::$(./dist/cryptol -v | grep Cryptol | cut -d' ' -f2)"

      - name: Zip up dist
        shell: bash
        env:
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: |
          if [[ "$RUNNER_OS" == Windows ]]; then 7z a -tzip -mx9 dist.zip dist; else zip -r dist.zip dist; fi
          gpg --batch --import <(echo "$SIGNING_KEY")
          fingerprint="$(gpg --list-keys | grep galois -a1 | head -n1 | awk '{$1=$1};1')"
          echo "$fingerprint:6" | gpg --import-ownertrust
          gpg --yes --no-tty --batch --pinentry-mode loopback --default-key "$fingerprint" --detach-sign -o dist.zip.sig --passphrase-file <(echo "$SIGNING_PASSPHRASE") dist.zip

      - uses: actions/upload-artifact@v1
        with:
          name: cryptol-${{ steps.cryptol.outputs.version }}-${{ matrix.os }}-x86_64.sig
          path: dist.zip.sig

      - uses: actions/upload-artifact@v1
        with:
          name: cryptol-${{ steps.cryptol.outputs.version }}-${{ matrix.os }}-x86_64
          path: dist.zip
