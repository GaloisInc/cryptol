name: Cryptol
on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # TODO: Remove
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        ghc: ["8.4.4", "8.6.5", "8.8.1"]
        cabal: ["3.0.0.0"]
    name: Cryptol - GHC v${{ matrix.ghc }} - ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      # https://github.com/actions/setup-haskell/pull/12
      - uses: haskell-CI/setup@implement-fallback-install
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - uses: actions/cache@v1
        name: Cache cabal store
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          # https://github.com/actions/cache/issues/109 "Enable always writing cache to support hermetic build systems"
          # https://github.com/actions/cache/issues/109#issuecomment-558771281
          # https://github.com/actions/cache/issues/239#issuecomment-606950711 Investigate this workaround if cache starts filling up
          key: store-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/cabal.GHC-*') }}-${{ github.sha }}
          restore-keys: |
            store-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/cabal.GHC-*') }}-
            store-${{ runner.os }}-${{ matrix.ghc }}-

      - name: Install System Dependencies
        shell: bash
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          case "$RUNNER_OS" in
          Linux)
            curl -o z3.zip -sL "https://github.com/Z3Prover/z3/releases/download/z3-4.8.7/z3-4.8.7-x64-ubuntu-16.04.zip"
            unzip z3.zip
            cp z3-*/bin/z3 $GITHUB_WORKSPACE/bin/z3
            chmod +x $GITHUB_WORKSPACE/bin/z3
            ;;
          macOS)
            curl -o z3.zip -sL "https://github.com/Z3Prover/z3/releases/download/z3-4.8.7/z3-4.8.7-x64-osx-10.14.6.zip"
            unzip z3.zip
            cp z3-*/bin/z3 $GITHUB_WORKSPACE/bin/z3
            chmod +x $GITHUB_WORKSPACE/bin/z3
            ;;
          Windows)
            curl -o z3.zip -sL "https://github.com/Z3Prover/z3/releases/download/z3-4.8.7/z3-4.8.7-x64-win.zip"
            7z x -bd z3.zip
            cp z3-*/bin/z3.exe $GITHUB_WORKSPACE/bin/z3.exe
            ;;
          *)
            echo "$RUNNER_OS not supported"
            exit 1
            ;;
          esac
          echo "::add-path::$GITHUB_WORKSPACE/bin"

      - name: Check path
        shell: bash
        run: z3 --version

      - name: Install Dependencies
        shell: bash
        run: |
          if [[ $RUNNER_OS != "Windows" ]]; then cp cabal.GHC-${{ matrix.ghc }}.config cabal.project.freeze; fi
          cabal configure --allow-newer -j2
          cabal build --only-dependencies exe:cryptol
          mkdir -p bin
          cabal install --install-method copy --installdir bin test-lib

      - name: Build
        shell: bash
        run: cabal build exe:cryptol exe:cryptol-html

      - name: Test
        shell: bash
        run: ./cry test

      - name: Copy binaries to dist
        run: cabal install --install-method copy --installdir dist exe:cryptol

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          path: dist
          name: ${{ matrix.ghc }}-${{ matrix.cabal }}-${{ matrix.os }}-bins

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker://pandoc/latex:latest
        with:
          args: >-
            sh -c
            "
            apk add make &&
            tlmgr install subfigure lastpage preprint adjustbox nag collectbox sectsty todonotes palatino mathpazo &&
            cd docs &&
            make
            "
      - uses: actions/upload-artifact@v1
        with:
          name: docs
          path: docs

  bundle:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        ghc: ["8.4.4", "8.6.5", "8.8.1"]
        cabal: ["3.0.0.0"]
    needs: [docs, build]
    steps:
      # https://github.com/actions/download-artifact/issues/3
      - name: Download bins
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.ghc }}-${{ matrix.cabal }}-${{ matrix.os }}-bins
          path: dist/bin

      - shell: bash
        run: rm -rf docs

      - name: Download docs
        uses: actions/download-artifact@v1
        with:
          name: docs
          path: docs

      - name: Bundle together
        shell: bash
        run: |
          mkdir -p dist/examples
          mkdir -p dist/share/doc/cryptol

          cp docs/*md docs/*pdf dist/share/doc/cryptol
          cp -R examples/Minilock /dist/examples

          cp docs/ProgrammingCryptol/aes/AES.cry \
          docs/ProgrammingCryptol/enigma/Enigma.cry \
          examples/ChaChaPolyCryptolIETF.md \
          examples/Cipher.cry \
          examples/DES.cry \
          examples/DEStest.cry \
          examples/Test.cry \
          dist/examples/

          cp examples/contrib/EvenMansour.cry \
          examples/contrib/RC4.cry \
          examples/contrib/README.md \
          examples/contrib/mkrand.cry \
          dist/examples/contrib/

          cp examples/funstuff/Coins.cry \
          examples/funstuff/FoxChickenCorn.cry \
          examples/funstuff/NQueens.cry \
          examples/funstuff/marble.cry \
          dist/examples/funstuff/

      - uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.os }}-${{ matrix.ghc }}-release
          path: dist
      #     ${PKG}: ${CRYPTOL_EXE} \
      #     docs/*.md docs/*.pdf LICENSE LICENSE.rtf \
      #     ${PKG_EXAMPLE_FILES} ${PKG_EXCONTRIB_FILES} ${PKG_EXFUNSTUFF_FILES} \
      #     ${PKG_MINILOCK_FILES}
      #     $(CABAL) copy ${DESTDIR_ARG}
      #     mkdir -p ${PKG_CRY}
      #     mkdir -p ${PKG_DOC}
      #     mkdir -p ${PKG_EXAMPLES}
      #     mkdir -p ${PKG_EXCONTRIB}
      #     cp docs/*.md ${PKG_DOC}
      #     cp docs/*.pdf ${PKG_DOC}
      #     for EXAMPLE in ${PKG_EXAMPLE_FILES}; do \
      #     cp $$EXAMPLE ${PKG_EXAMPLES}; done
      #     for EXAMPLE in ${PKG_EXCONTRIB_FILES}; do \
      #     cp $$EXAMPLE ${PKG_EXCONTRIB}; done
      #     for EXAMPLE in ${PKG_EXFUNSTUFF_FILES}; do \
      #     cp $$EXAMPLE ${PKG_EXFUNSTUFF}; done
      #     cp -r examples/MiniLock ${PKG_EXAMPLES}
